{"version":3,"sources":["../../src/models/kanal.js"],"names":["Kanal","app","kanallar","obje","Promise","resolve","reject","id","get","idObjesi","uyeler","each","deger","anahtar","uyeObjectId","push","ObjeKullaniciId","kullaniciId","kanal","_id","ad","sonMesaj","tarih","Date","db","collection","insertOne","hata","bilgi","kanalId","toString","set","OnbellekKanal","IdIleBul","then","c","catch","err","q","secenekler","find","toArray","results","aggregate","sonuc","findOne","result"],"mappings":"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","file":"kanal.js","sourcesContent":["import _ from 'lodash'\nimport {toString} from \"../helper\";\nimport {ObjectID} from 'mongodb'\nimport {OrderedMap} from 'immutable'\n\nexport default class Kanal{\n\n    constructor(app){\n        this.app=app;\n        this.kanallar = new OrderedMap();\n    }\n\n\n    yarat(obje){\n\n       //let id = toString(_.get(obje  , '_id'));\n\n            return new Promise((resolve , reject) => {\n\n\n                let id = toString(_.get(obje  , '_id'));\n                \n                let idObjesi = id ? new ObjectID(id) : new ObjectID();\n\n                let uyeler =[];\n\n\n                _.each(_.get(obje , 'uyeler' ,[]), (deger , anahtar) =>{\n\n                    //console.log(\"Anahtar\", anahtar , deger);\n                    const uyeObjectId= new ObjectID(anahtar);\n                    uyeler.push(uyeObjectId);\n\n                });\n\n                let ObjeKullaniciId = null;\n\n                let kullaniciId = _.get(obje, 'kullaniciId' , null);\n\n                if(kullaniciId){\n                    ObjeKullaniciId = new ObjectID(kullaniciId);\n                }\n\n                const kanal = {\n                    _id : idObjesi,\n                    ad : _.get(obje , 'ad',''),\n                    sonMesaj : _.get(obje , 'sonMesaj',''),\n                    tarih : new Date(),\n                    kullaniciId : ObjeKullaniciId,\n                    uyeler : uyeler,\n                };\n\n                this.app.db.collection('kanallar').insertOne(kanal , (hata , bilgi)=>{\n\n                    if(!hata){\n                        const kanalId = kanal._id.toString();\n                        this.kanallar = this.kanallar.set(kanalId , kanal);\n\n\n                    }\n                    return hata ? reject(hata) : resolve(kanal);\n                });\n\n            });\n\n    }\n\n    yukle(id){\n\n        return new Promise((resolve , reject) =>{\n\n\n            id = _.toString(id);\n            // ilk olarak onbellekte bul\n\n            const OnbellekKanal = this.kanallar.get(id);\n\n            if(OnbellekKanal){\n\n                return resolve(OnbellekKanal);\n\n            }\n\n            //onbellekte yoksa dbe bakicaz aslan\n\n            this.IdIleBul(id).then((c)=>{\n                this.kanallar = this.kanallar.set(id , c);\n\n                return resolve(c);\n\n            }).catch((err) =>{\n\n                return reject(err);\n\n            })\n\n\n        })\n\n\n    }\n\n    bul(q , secenekler={}){\n\n                //console.log(q);\n\n            return new Promise((resolve, reject ) =>{\n\n\n               this.app.db.collection('kanallar').find(q , secenekler).toArray((err , results) =>{\n\n                   return err ? reject(err) : resolve(results);\n\n\n               });\n\n\n            });\n\n    }\n\n    aggregate(q){\n\n\nreturn new Promise((resolve , reject ) =>{\n\n\nthis.app.db.collection('kanallar').aggregate(q , (hata , sonuc) =>{\n\n            return hata ?  reject(hata) : resolve(sonuc);\n\n});\n\n\n})\n\n\n    }\n\n\n    IdIleBul(id){\n\n       return new Promise((resolve , reject) =>{\n\n           this.app.db.collection('kanallar').findOne({_id : new ObjectID(id)}, (err , result) =>{\n\n               if(err || !result){\n                   return reject(err ? err : \"Bulunamadi\");\n               }\n\n               return resolve(result);\n           });\n\n\n       })\n    }\n\n\n\n}"]}