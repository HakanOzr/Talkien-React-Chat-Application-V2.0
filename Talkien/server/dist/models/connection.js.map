{"version":3,"sources":["../../src/models/connection.js"],"names":["Connection","app","connections","modelDidLoad","counter","wss","on","ws","setInterval","console","log","socketID","toString","istemciBaglantisi","_id","kullaniciId","yetkilendirildi","set","msj","mesaj","gelenMesajiCevir","userWithTokenID","baglantiyiKapat","get","remove","kullaniciBaglantilari","filter","con","size","sendToMembers","eylem","yuk","models","kullanici","KullaniciDurumunuGuncelle","obje","JSON","stringify","send","KullaniciBaglantisi","mesajObjesi","yarat","then","kanalId","kanal","yukle","uyeIdleri","each","uyeId","uyeBaglantisi","x","forEach","baglanti","yolla","catch","kanalObjesi","uyeIDleri","sorgu","$in","sorguSecenekleri","isim","tarih","CERCATROVA","kullanicilar","id","uyeBaglantilari","kullaniciTokenId","token","tokenVekullaniciYukle","kullaniciIdSTR","hata","key","parse","query","$match","uyeler","$all","$lookup","from","localField","foreignField","as","$unwind","path","$eq","$group","db","collection","aggregate","err","results","result","uid","push","UyeBaglantilari","includes","connection"],"mappings":"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","file":"connection.js","sourcesContent":["import {OrderedMap} from 'immutable'\nimport {ObjectID} from 'mongodb'\nimport _ from 'lodash'\n\nexport default class Connection {\n\n\n    constructor(app) {\n\n        this.app = app;\n\n        this.connections = OrderedMap();\n\n        this.modelDidLoad();\n    }\n\n    modelDidLoad() {\n\n        //console.log(\"Connection class initilazed.\");\n        let counter = 0;\n\n        this.app.wss.on('connection', (ws) => {\n\n            counter++;\n\n            setInterval(()=>{\n\n\n                console.log(\"Servera baglanan kisi sayisi : \" , counter);\n\n\n            }, 15000);\n\n\n\n            const socketID = new ObjectID().toString();\n\n\n            const istemciBaglantisi = {\n\n\n                _id: `${socketID}`,\n                ws: ws,\n                kullaniciId: null,\n                yetkilendirildi: false,\n\n\n            };\n            // baglantiyi cachede sakla\n            this.connections = this.connections.set(socketID, istemciBaglantisi);\n\n\n            //ws.send(\"Merhaba there your ID : \" + socketID);\n\n\n            ws.on('message', (msj) => {\n\n                //console.log(\"SERVER : MESSAGE FROM CLIENT\" , msj)\n                const mesaj = this.gelenMesajiCevir(msj);\n\n                this.userWithTokenID(socketID, mesaj);\n\n                //console.log(\"SERVER : MESSAGE FROM CLIENT\" , msj);\n            });\n\n\n\n            //console.log(\"Biri websocket ile baglandi.\",);\n\n            ws.on('close', () => {\n\n                counter--;\n\n                //console.log(\"Birisi serverdan cikti !\" , socketID);\n                const baglantiyiKapat = this.connections.get(socketID);\n                const kullaniciId=_.toString(_.get(baglantiyiKapat , 'kullaniciId' , null));\n\n\n                this.connections = this.connections.remove(socketID);\n\n                if(kullaniciId){\n                    //kullaniciId ile eslesen butun soketleri bul\n                    const kullaniciBaglantilari = this.connections.filter((con)=> _.toString(_.get(con , 'kullaniciId')) === kullaniciId);\n\n                    if(kullaniciBaglantilari.size === 0){\n                        //bu kullaniciId ile online olan yok.yani kullanici offline demek\n\n                        this.sendToMembers(kullaniciId,{\n\n                            eylem:'kullanici_offline',\n                            yuk: kullaniciId\n                        });\n\n\n                        this.app.models.kullanici.KullaniciDurumunuGuncelle(kullaniciId , false);\n\n                    }\n\n                }\n\n\n            });\n\n\n        })\n\n\n    }\n\n    yolla(ws, obje) { // send\n\n        const mesaj = JSON.stringify(obje);\n\n        ws.send(mesaj);\n\n\n    }\n\n\n    userWithTokenID(socketID, msj) { // dotheJOB\n\n        const eylem = _.get(msj, 'eylem'); //yetkilendirmede yapiyor asil isleri yapan fonk bu diyrbiliriz\n        const yuk = _.get(msj, 'yuk');\n        const KullaniciBaglantisi = this.connections.get(socketID);\n\n        switch (eylem) {\n\n\n            case 'mesaj_yarat':\n\n                if(KullaniciBaglantisi.yetkilendirildi){\n                    let mesajObjesi = yuk;\n\n                    mesajObjesi.kullaniciId = _.get(KullaniciBaglantisi, 'kullaniciId');\n\n                    //console.log(\"Istemciden yeni mesaj yaratmak icin istegi aldim! \", yuk);\n\n                    this.app.models.mesaj.yarat(mesajObjesi).then((mesaj) => {\n\n                        //console.log(\"Mesaj basarili bir sekilde olusturuldu\" , mesaj);\n\n                        const kanalId = _.toString(_.get(mesaj , 'kanalId'));\n\n                        this.app.models.kanal.yukle(kanalId).then((kanal)=>{\n\n                     //console.log(\"BISEYLER BISEYLER! \", `${kullaniciId.length}`);\n\n                     const uyeIdleri = _.get(kanal , 'uyeler' , []);\n\n                     _.each(uyeIdleri, (uyeId) =>{\n\n                         uyeId = _.toString(uyeId);\n\n                         const uyeBaglantisi = this.connections.filter((x) => _.toString(x.kullaniciId) === uyeId);\n\n                        uyeBaglantisi.forEach((baglanti) =>{\n\n                            const ws = baglanti.ws;\n\n                            this.yolla(ws , {\n\n                                eylem : 'mesaj_eklendi',\n                                yuk : mesaj,\n\n                            })\n\n\n                        })\n                     });\n\n\n                        })\n\n                        // const kullaniciId = _.toString(mesaj.kullaniciId);\n                        // this.app.models.kullanici.yukle(kullaniciId).then((kullanici) => {\n                        //\n                        //     _.unset(kullanici , 'password'); // parola gizle\n                        //     mesaj.kullanici = kullanici;\n                        //\n                        //     console.log(\"Mesaj basarili bir sekilde olusturuldu\" , mesaj);\n                        //\n                        //     // kanaldaki herkese geri gonder\n                        //\n                        // });\n\n                        //mesaj olusturuldu\n\n                    }).catch(err => {\n\n                        const ws = KullaniciBaglantisi.ws;\n                        this.yolla(ws, {\n\n                            eylem: 'mesaj_yaratma_hatasi',\n                            yuk: yuk,\n                        })\n                    })\n                }\n\n                break;\n\n            case 'kanal_yarat':\n\n                let kanal = yuk;\n\n\n                const kullaniciId = KullaniciBaglantisi.kullaniciId;\n\n                kanal.kullaniciId = kullaniciId;\n\n\n                this.app.models.kanal.yarat(kanal).then((kanalObjesi) => {\n\n                    //kanal yaratma basarili\n                    //console.log(\"Kanal yaratma basarili \" , typeof kullaniciId, kanalObjesi);\n\n                    const uyeIDleri = _.get(kanalObjesi, 'uyeler', []);\n\n                    //uye idsi olan butun kullanicilari yakala\n\n                    const sorgu = {\n\n                        _id: {$in: uyeIDleri}\n\n                    };\n\n                    const sorguSecenekleri = {\n                        _id: 1,\n                        isim: 1,\n                        tarih: 1,\n\n\n                    };\n\n\n                    this.app.models.kullanici.CERCATROVA(sorgu, sorguSecenekleri).then((kullanicilar) => {\n                        kanalObjesi.kullanicilar = kullanicilar;\n\n\n                        _.each(uyeIDleri, (id) => {\n\n                            const kullaniciId = id.toString();\n                            const uyeBaglantilari = this.connections.filter((con) => `${con.kullaniciId}` === kullaniciId);\n\n                            if (uyeBaglantilari.size) {\n                                uyeBaglantilari.forEach((con) => {\n                                    const ws = con.ws;\n                                    const obje = {\n                                        eylem: 'kanal_eklendi',\n                                        yuk: kanalObjesi,\n                                    };\n                                    // userid si eslesen soket istemciye gonderiyorum EP9\n                                    this.yolla(ws, obje);\n\n                                });\n                                //console.log(uyeBaglantilari);\n                            }\n\n\n                        });\n\n\n                    });\n\n\n                    //const uyeBaglantilari = this.connections.filter((con)=> `${con.kullaniciId}`)\n\n\n                });\n                //console.log(\"Istemci yeni bir kanal yaratmak istiyor\", kanal);\n\n\n                break;\n            case 'yetki':\n\n                const kullaniciTokenId = yuk;\n                const baglanti = this.connections.get(socketID);\n\n                if (baglanti) {\n\n\n                    this.app.models.token.tokenVekullaniciYukle(kullaniciTokenId).then((token) => {\n\n                        const kullaniciId = token.kullaniciId;\n                        baglanti.yetkilendirildi = true;\n                        baglanti.kullaniciId = `${kullaniciId}`;\n\n                        this.connections = this.connections.set(socketID, baglanti);\n\n\n\n                        // istemciye yetkilendirildigini gonder\n                        const obje = {\n                            eylem: 'Yetkilendirme Basarili',\n                            yuk: 'Yetkilendirildin.'\n                        };\n                        this.yolla(baglanti.ws, obje);\n\n                        const kullaniciIdSTR = _.toString(kullaniciId);\n                        this.sendToMembers(kullaniciIdSTR, {\n                            eylem: 'kullanici_online',\n                            yuk: kullaniciIdSTR,\n                        });\n\n\n                        this.app.models.kullanici.KullaniciDurumunuGuncelle(kullaniciIdSTR , true);\n\n\n                    }).catch((hata) => {\n\n                        const obje = {\n                            eylem: 'Yetkilendirme Hatasi',\n                            yuk: \"Hesabinizi yetkilendiremedik :\" + kullaniciTokenId\n\n\n                        };\n                        this.yolla(baglanti.ws, obje);\n\n\n                    })\n\n\n                }\n\n\n                //console.log(\"User with token ID is :\" , kullaniciTokenId, typeof  kullaniciTokenId);\n\n                break;\n\n\n            default:\n                break;\n\n\n        }\n    }\n\n    hepsineYolla(obje) {  // send all\n\n\n        // send socket messages to all clients.\n\n        this.connections.forEach((con, key) => {\n            const ws = con.ws;\n\n            this.yolla(ws, obje);\n        });\n    }\n\n\n\n    gelenMesajiCevir(msj) {  // decodeMesasas\n\n        let mesajObjesi = null;\n\n        try {\n            mesajObjesi = JSON.parse(msj);\n        }\n        catch (hata) {\n            console.log(\"Socket mesajini decode edemedik\", msj)\n        }\n\n\n        return mesajObjesi;\n\n\n    }\n\n    sendToMembers(kullaniciId, obje) {\n\n        const query = [\n            {\n                $match: {\n\n                    uyeler: {$all: [new ObjectID(kullaniciId)]}\n                }\n            },\n            {\n\n                $lookup: {\n\n                    from: 'kullanicilar',\n                    localField: 'uyeler',\n                    foreignField: '_id',\n                    as: 'kullanicilar'\n                }\n            },\n            {\n                $unwind: {\n\n                    path: '$kullanicilar'\n                }\n            },\n            {\n                $match: {'kullanicilar.online': {$eq: true}}\n            },\n            {\n                $group: {\n\n                    _id: \"$kullanicilar._id\"\n                }\n            }\n\n\n        ];\n\n\n        const kullanicilar = [];\n\n\n        this.app.db.collection('kanallar').aggregate(query, (err, results) => {\n\n\n            // console.log(\"found members array who is chattting with current user\", results);\n            if (err === null && results) {\n\n                _.each(results, (result) => {\n\n\n                    const uid = _.toString(_.get(result, '_id'));\n                    if (uid) {\n                        kullanicilar.push(uid);\n                    }\n                });\n\n\n                // this is list of all connections is chatting with current user\n                const UyeBaglantilari = this.connections.filter((con) => _.includes(kullanicilar, _.toString(_.get(con, 'kullaniciId'))));\n                if (UyeBaglantilari.size) {\n\n                    UyeBaglantilari.forEach((connection, key) => {\n\n                        const ws = connection.ws;\n                        this.yolla(ws, obje);\n                    });\n                }\n\n\n            }\n        })\n    }\n\n}"]}