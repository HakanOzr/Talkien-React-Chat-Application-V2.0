{"version":3,"sources":["../../src/models/mesaj.js"],"names":["Mesaj","app","mesajlar","obje","Promise","resolve","reject","id","get","toString","kullaniciId","kanalId","mesaj","_id","body","tarih","Date","db","collection","insertOne","err","info","findOneAndUpdate","$set","sonMesaj","guncellendi","models","kullanici","yukle","then","unset","catch","limit","offset","query","$lookup","from","localField","foreignField","as","$match","$eq","$project","isim","online","$arrayElemAt","$limit","$skip","$sort","aggregate","hata","sonuclar"],"mappings":"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","file":"mesaj.js","sourcesContent":["import _ from 'lodash';\nimport {OrderedMap} from 'immutable';\nimport {ObjectID} from 'mongodb';\n\nexport default class Mesaj {\n\n    constructor(app) {\n        this.app = app;\n        this.mesajlar = new OrderedMap();\n\n\n    }\n\n    yarat(obje) {\n\n\n       return new Promise((resolve , reject) =>{\n\n\n           let id = _.get(obje , 'id' , null);\n           id = _.toString(id);\n\n           const kullaniciId = new ObjectID(_.get(obje , 'KullaniciID'));\n           const kanalId = new ObjectID(_.get(obje , 'kanalid'));\n\n           const mesaj ={\n\n               _id: new ObjectID(id),\n               body: _.get(obje, 'body' , ''),\n               kullaniciId: kullaniciId,\n               kanalId: kanalId,\n               tarih: new Date(),\n\n           };\n\n           this.app.db.collection('mesajlar').insertOne(mesaj,(err , info) =>{\n\n               if(err){\n                   return reject(err);\n\n               }\n\n               //son mesaji guncelleyelim kanaldaki\n               this.app.db.collection('kanallar').findOneAndUpdate({_id:kanalId},{\n\n                   $set:{\n                       sonMesaj: _.get(mesaj, 'body', ''),\n                       guncellendi: new Date(),\n                   }\n\n\n\n\n               });\n\n               this.app.models.kullanici.yukle(_.toString(kullaniciId)).then((kullanici) =>{\n\n                   _.unset(kullanici , 'password');\n                   mesaj.kullanici=kullanici;\n\n                   return resolve(mesaj);\n\n               }).catch((err)=>{\n\n                   return reject(err);\n\n               });\n\n\n           });\n\n\n\n       });\n\n    }\n\n\n    KanalMesajlariniAl(kanalId , limit = 50, offset = 0){\n\n\n\n            return new Promise((resolve , reject) =>{\n\n\n                kanalId= new ObjectID(kanalId);\n               /* this.app.db.collection('mesajlar').find({kanalId: kanalId}).skip(offset).limit(limit).toArray((hata , mesajlar) =>{\n\n\n                    return hata ? reject(hata) : resolve(mesajlar);\n\n                });*/\n\n                const query = [\n                    {\n\n                        $lookup: {\n                            from: 'kullanicilar',\n                            localField: 'kullaniciId',\n                            foreignField: '_id',\n                            as: 'kullanici'\n                        }\n                    },\n                    {\n                        $match: {\n                            'kanalId': {$eq: kanalId},\n                        },\n                    },\n                    {\n                        $project: {\n                            _id: true,\n                            kanalId: true,\n                            kullanici: {_id: true, isim: true, tarih: true, online: true},\n                            kullaniciId: true,\n                            body: true,\n                            tarih: true,\n                        }\n                    },\n                    {\n\n                        $project: {\n                            _id: true,\n                            kanalId: true,\n                            kullanici: {$arrayElemAt: ['$kullanici', 0]},\n                            kullaniciId: true,\n                            body: true,\n                            tarih: true,\n                        }\n                    },\n\n                    {\n                        $limit: limit\n                    },\n                    {\n                        $skip: offset,\n                    },\n                    {\n                        $sort: {tarih: 1}\n                    }\n\n\n                ];\n\n               this.app.db.collection('mesajlar').aggregate(query,(hata , sonuclar)=>{\n\n                   return hata ? reject(hata) : resolve(sonuclar);\n\n               });\n\n            })\n\n\n    }\n\n}"]}