{"version":3,"sources":["../../src/models/kullanici.js"],"names":["Kullanici","app","kullanicilar","k","Promise","resolve","reject","regex","RegExp","sorgu","$or","isim","$regex","db","collection","find","_id","tarih","toArray","hata","sonuclar","length","Mesaj","query","options","id","cachedekiKullanici","get","IdileKullaniciBul","kullanici","set","kullaniciId","onlimeMi","update","online","guncelle","$set","bilgi","password","mesaj","isimIleKullaniciBul","result","Gelenpassword","ParolaEslesti","models","token","Yarat","then","catch","callback","findOne","sonuc","hatalar","kullanicibilgileri","onayla","HataMesaji","do","forEach","kullanicibilgdogrulama","gecerliMi","msj","push","err","join","toLower","trim","Message","FormatlanmisKullanici","Date","console","log","kaydetmedenOnce","insertOne","toString"],"mappings":"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","file":"kullanici.js","sourcesContent":["import _ from 'lodash'\nimport {emailmi} from '../helper'\nimport {ObjectID} from 'mongodb'\nimport {OrderedMap} from 'immutable'\n\nexport default class Kullanici{\n\n    constructor(app){\n\n        this.app = app;\n        this.kullanicilar = new OrderedMap();\n\n\n    }\n\n\n    arama(k= \"\"){\n\n        return new Promise((resolve , reject) =>{\n\n\n            const regex = new RegExp(k , 'i');\n\n            const sorgu = {\n                $or:[\n                    {isim :{$regex: regex}},\n                    //{email :{$regex: regex}},\n                ],\n            };\n\n            this.app.db.collection('kullanicilar').find(sorgu, {_id :true , isim :true , tarih:true}).toArray((hata , sonuclar)=>{\n\n\n                if (hata || !sonuclar || !sonuclar.length){\n\n                    return reject({Mesaj : \"Kullanici bulunamadi !\"});\n\n                }\n\n                return resolve(sonuclar);\n\n            })\n\n\n        })\n\n\n\n\n\n    }\n\n    CERCATROVA(query ={} , options ={}){\n\n        return new Promise((resolve , reject) =>{\n\n            this.app.db.collection('kullanicilar').find(query , options).toArray((hata , kullanicilar)=>{\n\n                return hata ? reject(hata) : resolve(kullanicilar);\n\n\n\n            })\n\n\n\n\n        });\n\n\n\n    }\n\n\n    yukle(id){\n\n        id = `${id}`;\n\n        return new Promise((resolve , reject) =>{\n\n            // cachede kullanici varsa databasede aramamiza gerek yok VIDEO 7\n\n            const cachedekiKullanici = this.kullanicilar.get(id);\n\n            if(cachedekiKullanici){   // bulursak tamam\n\n                return resolve(cachedekiKullanici)\n            }\n\n            //bulamazsak databasede aricaksin kopek gibi\n\n            //const kullanici ={herhangi: \"birsey\"};\n\n            this.IdileKullaniciBul(id , (hata , kullanici) =>{\n\n                if(!hata && kullanici){\n                    this.kullanicilar = this.kullanicilar.set(id, kullanici);\n                }\n               return hata ? reject(hata) : resolve(kullanici);\n\n            });\n\n\n\n        })\n\n\n\n    }\n\n    KullaniciDurumunuGuncelle(kullaniciId, onlimeMi=false){\n\n       return new Promise((resolve , reject) =>{\n\n\n\n           this.kullanicilar = this.kullanicilar.update(kullaniciId , (kullanici) =>{\n\n              if(kullanici){\n                  kullanici.online = onlimeMi;\n              }\n\n               return kullanici;\n\n\n           });\n\n           // let kullanici = this.kullanicilar.get(kullaniciId);\n           //\n           // if(kullanici){\n           //      kullanici.online = true;\n           // }\n           //\n           // this.kullanicilar = this.kullanicilar.set(kullaniciId , kullanici);\n\n           const sorgu={\n\n           _id: new ObjectID(kullaniciId),\n\n           };\n\n           const guncelle = {\n\n               $set:{online:onlimeMi},\n\n           };\n\n\n\n\n           this.app.db.collection('kullanicilar').update(sorgu , guncelle,(hata , bilgi) =>{\n\n\n\n               if(hata){\n\n                   return reject(hata);\n               }\n\n               resolve(bilgi);\n\n\n\n           })\n\n\n\n       })\n\n    }\n\n    giris(kullanici){\n\n        const isim = _.get(kullanici , 'isim' , '');\n        const password = _.get(kullanici , 'password' , '');\n\n        return new Promise((resolve , reject) => {\n\n\n\n            if(!password || !isim){\n\n                return reject({mesaj : \"Login hatasi yavrum\"})\n\n            }\n\n            this.isimIleKullaniciBul(isim , (hata , result) =>{\n\n                if(hata){\n                    return reject({mesaj : \"Giris hatasi bebekim\"});\n                }\n\n\n\n                const Gelenpassword =_.get(result , 'password');\n\n                let ParolaEslesti;\n\n                if(Gelenpassword > password){\n\n                    return reject({mesaj : \"Login hatasi parola eslesmedi\"});\n\n                } else if( Gelenpassword < password){\n                    return reject({mesaj : \"Login hatasi parola eslesmedi\"});\n                }\n\n                else{   // bunada gerek yok aslinda\n                    ParolaEslesti=true;\n                }\n\n\n\n\n                //console.log(\"Parola Eslesti :\" , ParolaEslesti);\n                // giris basarili bebegim\n\n                const kullaniciId = result._id;\n\n                this.app.models.token.Yarat(kullaniciId).then((token) =>{\n\n                    token.kullanici = result;\n\n                    return resolve(token);\n\n                }).catch(hata => {\n\n                    return reject({mesaj : \"Login hatasi !\"});\n                })\n\n                //return resolve(result);\n\n            })\n\n\n        });\n\n\n\n    }\n\n    isimIleKullaniciBul(isim , callback = () => {}){\n\n\n        this.app.db.collection('kullanicilar').findOne({isim : isim}, (hata , result) => {\n\n            if(hata || !result){\n                return callback({mesaj : \"Kullanici bulunamadi aslanim\"})\n            }\n\n            return callback(null , result);\n\n        });\n\n}\n\n    IdileKullaniciBul(id,callback = () => {\n\n    }){\n\n        //console.log(\"Sorgu yapmaya basla\");\n\n\n        if(!id){\n\n            return callback({mesaj: \"Kullanici bulunamadi\"} , null);\n\n        }\n\n\n\n\n        const kullaniciId = new ObjectID(id);\n        this.app.db.collection('kullanicilar').findOne({_id: kullaniciId}, (hata , sonuc)=>{\n\n            if(hata || !sonuc){\n                return callback({mesaj: \"Kullanici bulunamadi\"});\n            }\n\n            return callback(null, sonuc);\n\n\n        });\n\n\n\n    }\n\n    kaydetmedenOnce(kullanici , callback =() =>{}){\n\n// kaydetmeden once kontrol et dogrumu degeler diye\n\n        let hatalar = [];\n        const kullanicibilgileri = ['isim' , 'password'];\n        const onayla = {\n            isim:{\n                HataMesaji: 'Isim gereklidir',\n                do: () =>{\n                    const isim = _.get(kullanici,'isim', '');\n                    return isim.length;\n                }\n            },\n\n             /*email:{\n                HataMesaji:'Email girisiniz dogru degil !',\n                 do: () =>{\n                     const email = _.get(kullanici,'email', '');\n\n                     if(!email.length || !emailmi(email)){\n                         return false;\n                     }\n                      return true;\n                 }\n             },*/\n             password:{\n                 HataMesaji: 'Parola gerekli ve 2 karakterden fazla olmali',\n                 do: () =>{\n                     const password = _.get(kullanici,'password', '');\n\n                     if(!password.length || password.length < 3 ){\n                         return false;\n                     }\n                     return true;\n                 }\n             },\n\n        };\n\n        //butun gerekli bilgileri donguye alip kontrol ediyoruz gecerlimi degilmi diye\n        kullanicibilgileri.forEach((kullanicibilgileri) =>{\n            const kullanicibilgdogrulama = _.get(onayla , kullanicibilgileri);\n            if(kullanicibilgdogrulama){\n\n                const gecerliMi = kullanicibilgdogrulama.do();\n                const msj = kullanicibilgdogrulama.HataMesaji;\n\n                if(!gecerliMi){\n                    hatalar.push(msj);\n                }\n\n            }\n\n\n\n        });\n        \n        if (hatalar.length){\n            const err = _.join(hatalar , ',');\n            return callback(err , null);\n        }\n\n        // zaten varmi\n\n        const isim = _.toLower(_.trim(_.get(kullanici , 'isim' , '')));\n        this.app.db.collection('kullanicilar').findOne({isim: isim} , (err , result) =>{\n\n            if(err || result){\n                return callback({Message : \"Isim zaten kayitli.\"} , null);\n            }\n            const password = _.get(kullanici , 'password');\n\n            const FormatlanmisKullanici ={\n\n              isim: `${_.trim(_.get(kullanici,'isim'))}`,\n                //email: email,\n                password: password,\n                tarih : new Date(),\n\n\n\n            };\n\n            return callback(null , FormatlanmisKullanici);\n\n            //console.log(\"kontrol \" , err , result);\n            \n        });\n\n        //return callback(null , kullanici);\n\n\n}\n\n    Yarat(kullanici){\n\n        const db = this.app.db;\n\n        console.log(\"Kullanici :\" , kullanici);\n\n        return new Promise((resolve , reject) =>{\n\n            this.kaydetmedenOnce(kullanici ,(hata , kullanici) => {\n\n                console.log(\"Onaylanma isleminden sonra :\" , hata , kullanici);\n\n                 if(hata){\n                     return reject(hata);\n                 }\n                 //veritabanina yeni kullanici ekle fakat\n                 db.collection('kullanicilar').insertOne(kullanici ,(hata , bilgi) =>{\n\n                     // dogru ekliyor mu hata varmi\n                     if(hata){\n                         return reject({Mesaj : \"Kayit sirasinda bir hata meydana geldi.\"});\n\n                     }\n\n                     const kullaniciId = _.get(kullanici , '_id').toString(); // userid string olsun OBJECT ID\n\n\n                     this.kullanicilar = this.kullanicilar.set(kullaniciId , kullanici);\n\n                        // hata yok\n                     return resolve(kullanici);\n\n\n                 });\n\n            });\n            //return reject(\"Kullanici bulunamadi !\");\n\n\n        });\n\n    }\n\n}"]}